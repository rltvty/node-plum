#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-plum:server');
var http = require('http');
var eventServer = require('../event-server');
var watch = require('../plum-watch');
var config = require('../plum-config');
var request = require('../plum-request');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var eServer = eventServer(server);



var all_ips = config.all_ips();
var watchers = {};
var bathrooms = {};

for (var i in all_ips) {
    var name = all_ips[i].host;
    var watcher = watch.new(all_ips[i].ip, name);
    watcher.on('power', function (power, name) {
        console.log(name + ' power: ' + power);
        eServer.sendEvent({name: name, power: power});
    });
    watcher.on('motion', function (motion, name) {
        console.log(name + ' motion: ' + motion);
    });
    watcher.on('level', function (level, name) {
        console.log(name + ' level: ' + level);
        eServer.sendEvent({name: name, level: level});
    });
    watchers[name] = watcher;

    if (name == 'Downstairs Bathroom' || name == 'PlumLP-MasterBath') {
        watcher.on('motion', function (motion, name) {
            var motion_threshold = (name == 'Downstairs Bathroom') ? 720 : 720;
            if (motion > motion_threshold) {
                console.log('motion detected on ' + name);
                var token = config.house_token();
                var props = config.control_props(name);
                request.status(token, props,
                    function callback(error, response, body) {
                        if (!error && response.statusCode == 200) {
                            console.log('current level in ' + name + ' is ' + body.level);
                            if (body.level < 1) {
                                console.log('current level in ' + name + ' is too low, setting higher...');
                                request.setLevel(token, props, 1,
                                    function callback(error, response, body) {
                                        if (!error && response.statusCode == 204) {
                                            console.log('SUCCESS setting level in ' + name);
                                        }
                                    }
                                );
                            }
                        }
                    }
                );
            }
        });
    }
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
